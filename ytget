#!/usr/bin/env ruby
# frozen_string_literal: true

require 'colorize'

class List
  attr :data

  def initialize(filename)
    @filename = filename

    @data = []

    load
  end

  def size
    @data.size
  end

  def name
    @filename
  end

  def save
    f = File.open(@filename, 'w')
    f.puts @data.uniq.join("\n")
    f.close
  end

  def include?(value)
    @data.include?(value)
  end

  def <<(value)
    @data << value
  end

  private

  def load
    if File.exist?(@filename)
      @data = File.open(@filename, 'r').map { |line| line.split(/\s+/).first }
    else
      puts "File [#{@filename}] not available"
    end
  end
end

Option = Struct.new(:fid, :score, :line)

def score_audio(line)
  l = line.downcase

  s = 0
  s += 1 if l.include?('high')
  s += 1 if l.include?('default')
  s += 1 if l.include?('mp4')

  s
end

def score_video(res, line)
  l = line.downcase

  s = 0
  s += 1 if l.include?('mp4')
  s += score_res(res)

  s
end

def score_res(res)
  x, = res.split('x').map(&:to_i)

  if x < 1280
    x / 1280.0
  else
    # Slightly favour the larger formats
    1280.0 / x + 0.1
  end
end

def get_files
  downloaded = 'downloaded.txt'
  available  = nil

  Dir['*.txt'].each do |filename|
    filename.chomp!

    next if filename == 'downloaded.txt'

    if available.nil?
      available = filename
    else
      puts "Available already set to [#{available}] found [#{filename}]".red
      exit 1
    end
  end

  if available.nil?
    puts 'No files of videos found'.red
    exit 1
  end

  [downloaded, available]
end

def get_options
  flags = { 'limit' => 20 }
  opts = []

  while ARGV.any?
    x = ARGV.shift

    case x
    when '--format'
      flags['format'] = ARGV.shift
    when '--limit'
      flags['limit'] = ARGV.shift.to_i
    when '--id'
      flags['id'] = ARGV.shift
    else
      opts << x
    end
  end

  [flags, opts]
end

def best_format(vid)
  x = `yt-dlp -F https://www.youtube.com/watch?v=#{vid}`

  video = []
  audio = []

  x.split("\n").each do |line|
    if line.include?('audio only')
      fid, = line.split(/\s+/, 2)
      audio << Option.new(fid, score_audio(line), line)
    elsif line.include?('video only')
      fid, _, res, = line.split(/\s+/, 4)
      video << Option.new(fid, score_video(res, line), line)
    end
  end

  a = audio.sort_by(&:score).last
  v = video.sort_by(&:score).last

  puts "[audio] #{a.line.gsub(/\s+/, ' ')}"
  puts "[video] #{v.line.gsub(/\s+/, ' ')}"

  "#{v.fid}+#{a.fid}"
end

flags, opts = get_options

fmt = flags['format'] || 'b'
wanted_vid = flags['id']

d, a = get_files

downloads = List.new(d)
available = List.new(a)

puts "==> Existing downloads in [#{downloads.name}] (#{downloads.size} lines)".bold
puts "    Available videos in [#{available.name}] (#{available.size} lines)".bold

todo = []
available.data.each do |vid|
  next if downloads.include?(vid)
  todo << vid
end

puts "    #{todo.size} new videos to download".bold

todo.each_with_index do |vid, index|
  if index == flags['limit']
    puts '    Download limit reached'.yellow
    break
  end

  next if wanted_vid && wanted_vid != vid

  puts "==> Downloading #{vid} (#{index + 1} of #{todo.size})".green

  begin
    if fmt == 'b'
      f = best_format(vid)
      f = 'b' if f.nil?
    else
      f = fmt
    end

    r = system("yt-dlp -f #{f} https://www.youtube.com/watch?v=#{vid}")
    if r == true
      puts '    Done'.green
      downloads << vid
      downloads.save
    else
      puts '    Something went wrong!'.red
    end
  rescue => e
    puts "    Exception: #{e}".red
    e.backtrace.each do |line|
      puts "    #{line}".light_black
    end
  end

  sleep 5
end

puts '==> Ended'.bold
