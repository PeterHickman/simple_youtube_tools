#!/usr/bin/env ruby
# frozen_string_literal: true

require 'colorize'

class List
  attr :data

  def initialize(filename)
    @filename = filename

    @data = []

    load
  end

  def size
    @data.size
  end

  def name
    @filename
  end

  def save
    f = File.open(@filename, 'w')
    f.puts @data.uniq.join("\n")
    f.close
  end

  def include?(value)
    @data.include?(value)
  end

  def <<(value)
    @data << value
  end

  private

  def load
    if File.exist?(@filename)
      @data = File.open(@filename, 'r').map { |line| line.split(/\s+/).first }
    else
      puts "File [#{@filename}] not available"
    end
  end
end

def get_files
  downloaded = 'downloaded.txt'
  available  = nil

  Dir['*.txt'].each do |filename|
    filename.chomp!

    next if filename == 'downloaded.txt'

    if available.nil?
      available = filename
    else
      puts "Available already set to [#{available}] found [#{filename}]".red
      exit 1
    end
  end

  if available.nil?
    puts 'No files of videos found'.red
    exit 1
  end

  [downloaded, available]
end

def get_options
  flags = { 'limit' => 20 }
  opts = []

  while ARGV.any?
    x = ARGV.shift

    case x
    when '--format'
      flags['format'] = ARGV.shift
    when '--limit'
      flags['limit'] = ARGV.shift.to_i
    else
      opts << x
    end
  end

  [flags, opts]
end

def best_format(vid)
  x = `yt-dlp -F https://www.youtube.com/watch?v=#{vid}`

  v = nil
  a = nil

  formats = []
  # Find the best video
  x.split("\n").each do |line|
    next unless line.include?(' mp4 ')
    next unless line.include?(' https ')

    # Earlier files are more compressed
    v = line.split(/\s+/).first
    r = line.split(/\s+/)[2].split('x').first.to_i

    next unless r >= 1280

    formats << [r, v]
  end

  v = formats.sort.first.last

  return 'b' if v.nil?

  # Find the best audio
  x.split("\n").each do |line|
    next unless line.include?(' audio only ')
    next unless line.include?(' mp4 ')

    a = line.split(/\s+/).first
    break
  end

  return 'b' if a.nil?

  "#{v}+#{a}"
end

flags, opts = get_options

fmt = flags['format'] || 'b'

d, a = get_files

downloads = List.new(d)
available = List.new(a)

puts "==> Existing downloads in [#{downloads.name}] (#{downloads.size} lines)".bold
puts "    Available videos in [#{available.name}] (#{available.size} lines)".bold

todo = []
available.data.each do |vid|
  next if downloads.include?(vid)
  todo << vid
end

puts "    #{todo.size} new videos to download".bold

todo.each_with_index do |vid, index|
  if index == flags['limit']
    puts '    Download limit reached'.yellow
    break
  end

  puts "==> Downloading #{vid} (#{index + 1} of #{todo.size})".green

  if fmt == 'b'
    f = best_format(vid)
    f = 'b' if f.nil?
  else
    f = fmt
  end

  r = system("yt-dlp -f #{f} https://www.youtube.com/watch?v=#{vid}")
  if r == true
    puts '    Done'.green
    downloads << vid
    downloads.save
  else
    puts '    Something went wrong!'.red
  end

  sleep 5
end

puts '==> Ended'.bold
