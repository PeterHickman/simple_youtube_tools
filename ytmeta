#!/usr/bin/env ruby
# frozen_string_literal: true

require 'net/http'
require 'uri'
require 'csv'
require 'nokogiri'

require 'colorize'

WANTED = %w[
  identifier
  duration
  name
  datePublished
  uploadDate
]

DOWNLOADED = 'downloaded.txt'
METADATA = 'metadata.csv'

def conv(s)
  s =~ /^PT(\d+)M(\d+)S/
  m = $1.to_i
  s = $2.to_i
  h = 0
  if m >= 60
    nm = m % 60
    h = (m - nm) / 60
    m = nm
  end

  format('%02<h>d:%02<m>d:%02<s>d', h: h, m: m, s: s)
end

def clean(s)
  s.gsub('&quot;', "'").gsub('&amp;', '&').gsub('&#39;', "'")
end

def all_props?(l)
  l.each do |x|
    return false if x.nil?
  end

  true
end

if File.exist?(METADATA)
  found_data = CSV.read(METADATA)
  found_data.shift
else
  found_data = []
end

existing_keys = found_data.map { |row| row.first }

downloaded = File.open(DOWNLOADED, 'r').map { |line| line.chomp }

puts "==> Collect metadata for downloaded videos".bold
puts "    #{downloaded.size} downloads".bold

todo = []
downloaded.each do |vid|
  next if existing_keys.include?(vid)
  todo << vid
end

puts "    #{todo.size} to check".bold

begin
  todo.each_with_index do |vid, index|
    puts "==> Collecting data for #{vid} (#{index + 1} of #{todo.size})".green

    data = {'identifier' => vid}

    begin
      html = Net::HTTP.get(URI.parse("https://www.youtube.com/watch?v=#{vid}"))

      doc = Nokogiri::HTML(html.force_encoding('UTF-8'))

      # We want to find
      # 1. duration
      # 2. name
      # 3. datePublished
      # 4. uploadDate

      doc.search('//meta').each do |e|
        if e['name'] && e['name'] == 'title'
          data['name'] = e['content']
        elsif e['itemprop']
          case e['itemprop']
          when 'datePublished'
            data['datePublished'] = e['content']
          when 'uploadDate'
            data['uploadDate'] = e['content']
          when 'duration'
            data['duration'] = conv(e['content'])
          end
        end
      end
    rescue => e
      puts "   #{e}".red
    end

    if data.any?
      puts "    #{data['name']}"
      x = WANTED.map { |prop| data[prop] }
      if all_props?(x)
        found_data << x
      else
        puts "    Incomplete data for #{vid} #{data}".red
      end
    else
      puts "    No data found for #{vid}".red
    end
  end
rescue
  puts 'Something bad happened'.red
ensure
  puts "==> Writing data to #{METADATA}".bold

  f = File.open(METADATA, 'w')

  f.puts WANTED.to_csv
  found_data.sort { |a, b| a[3] <=> b[3] }.each { |row| f.puts row.to_csv }
  f.close
end